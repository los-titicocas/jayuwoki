package dad.audio;

import com.sedmelluq.discord.lavaplayer.player.AudioPlayer;
import com.sedmelluq.discord.lavaplayer.player.event.AudioEventAdapter;
import com.sedmelluq.discord.lavaplayer.track.AudioTrack;
import com.sedmelluq.discord.lavaplayer.track.AudioTrackEndReason;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * Gestiona la cola de reproducci√≥n y el orden de las canciones.
 * Se encarga de pasar autom√°ticamente a la siguiente canci√≥n cuando una termina.
 */
public class TrackScheduler extends AudioEventAdapter {
    
    private final AudioPlayer player;
    private final BlockingQueue<AudioTrack> queue;

    public TrackScheduler(AudioPlayer player) {
        this.player = player;
        this.queue = new LinkedBlockingQueue<>();
    }

    /**
     * A√±ade una canci√≥n a la cola.
     * Si no hay nada reproduci√©ndose, inicia la reproducci√≥n inmediatamente.
     * 
     * @param track La canci√≥n a a√±adir
     */
    public void queue(AudioTrack track) {
        // ‚úÖ CORRECCI√ìN: Si no hay nada reproduci√©ndose, iniciar inmediatamente
        if (!player.startTrack(track, true)) {
            // Si startTrack devuelve false, significa que ya hay algo reproduci√©ndose
            // Entonces a√±adimos a la cola
            queue.offer(track);
            System.out.println("üéµ Canci√≥n a√±adida a la cola: " + track.getInfo().title);
        } else {
            // Si startTrack devuelve true, la canci√≥n empez√≥ a reproducirse
            System.out.println("‚ñ∂Ô∏è Reproduciendo: " + track.getInfo().title);
        }
    }

    /**
     * Pasa a la siguiente canci√≥n en la cola.
     */
    public void nextTrack() {
        AudioTrack nextTrack = queue.poll();
        if (nextTrack != null) {
            player.startTrack(nextTrack, false);
            System.out.println("‚è≠Ô∏è Siguiente canci√≥n: " + nextTrack.getInfo().title);
        } else {
            System.out.println("‚èπÔ∏è Cola vac√≠a, reproducci√≥n detenida");
        }
    }

    /**
     * Se ejecuta cuando una canci√≥n termina de reproducirse.
     */
    @Override
    public void onTrackEnd(AudioPlayer player, AudioTrack track, AudioTrackEndReason endReason) {
        System.out.println("‚úÖ Canci√≥n terminada: " + track.getInfo().title + " | Raz√≥n: " + endReason);
        
        // Solo pasa a la siguiente canci√≥n si termin√≥ normalmente o fue detenida
        if (endReason.mayStartNext) {
            nextTrack();
        }
    }

    /**
     * Se ejecuta cuando empieza a reproducirse una canci√≥n.
     */
    @Override
    public void onTrackStart(AudioPlayer player, AudioTrack track) {
        System.out.println("üéµ Iniciando reproducci√≥n: " + track.getInfo().title);
    }

    /**
     * Obtiene la cola de reproducci√≥n.
     */
    public BlockingQueue<AudioTrack> getQueue() {
        return queue;
    }
}